// eslint-disable-next-line import/extensions, import/no-useless-path-segments
const Tour = require('./../models/tourModel.js');

// 5) Middleware to alias top tours functionality
// This middleware will modify the request object to set specific query parameters
// for the top tours route, allowing us to reuse the same getAllTours handler
// This is useful for creating a route that shows the top 5 cheapest tours
exports.aliasTopTours = (req, res, next) => {
  req.query.limit = '5';
  req.query.sort = 'price,-ratingsAverage';
  req.query.fields = 'name,price,ratingsAverage,difficulty';
  next();
};

// Handlers
exports.getAllTours = async (req, res) => {
  try {
    //Filtering operation using filter object
    // const tours = await Tour.find({
    //   duration: 5,
    //   difficulty: 'easy',
    // });

    //using special Mongoose methods
    // const tours = await Tour.find()
    //   .where('duration')
    //   .equals(5)
    //   .where('difficulty')
    //   .equals('easy');

    //We dont want to query for the special parameters like page, sort, limit, fields
    //So we use destructuring to remove them from the query object

    //  BUILDING QUERY
    //  1A) Filtering - URL : 127.0.0.1:8000/api/v1/tours?difficulty=easy&page=44
    const queryObj = { ...req.query };
    const excludedFields = ['page', 'sort', 'limit', 'fields'];
    excludedFields.forEach((el) => delete queryObj[el]);

    // 1B) Advanced Filtering - URL : 127.0.0.1:8000/api/v1/tours?duration[gte]=5&price[lte]=1500
    let queryStr = JSON.stringify(queryObj);
    queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);
    console.log(JSON.parse(queryStr));

    let query = Tour.find(JSON.parse(queryStr));

    //  2) Sorting - URL : 127.0.0.1:8000/api/v1/tours?sort=price,ratingsAverage

    if (req.query.sort) {
      const sortBy = req.query.sort.split(',').join(' ');
      console.log(sortBy);
      query = query.sort(sortBy);
    } else {
      query = query.sort('-createdAt'); //default sorting by created time
    }

    // 3) Limiting Fields - URL: 127.0.0.1:8000/api/v1/tours?fields=price,name,difficulty,duration (only to show selected fields)
    // For excluding selected field - URL: 127.0.0.1:8000/api/v1/tours?fields=-price,-name

    if (req.query.fields) {
      const fields = req.query.fields.split(',').join(' ');
      console.log(fields);
      query = query.select(fields);
    } else {
      query = query.select('-__v'); //default sorting by created time
    }

    // 4) Pagination - URL: 127.0.0.1:8000/api/v1/tours?page=2&limit=3

    const page = req.query.page * 1 || 1;
    const limit = req.query.limit * 1 || 100;
    const skip = (page - 1) * limit;
    query = query.skip(skip).limit(limit);

    if (req.query.page) {
      const numTours = await Tour.countDocuments();
      if (skip >= numTours) throw new Error('This page does not exist');
    }
    // Executing the query
    const tours = await query;

    res.status(200).json({
      status: 'success',

      result: tours.length,
      data: { tours },
    });
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: `Error : ${err}`,
    });
  }
};

exports.getTour = async (req, res) => {
  // const id = req.params.id * 1;
  // const tour = tours.find((el) => el.id === id);
  // res.status(200).json({ status: 'success', data: { tour } });

  try {
    const tour = await Tour.findById(req.params.id);
    //Tour.findOne({_id: req.paramd.id}) == findById(req.params.id)
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: `Error : ${err}`,
    });
  }
};

exports.createTour = async (req, res) => {
  try {
    // const newTour = new Tour({});
    // newTour.save();

    const newTour = await Tour.create(req.body);

    res.status(201).json({
      status: 'success',
      data: {
        tours: newTour,
      },
    });
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: `Error : ${err}`,
    });
  }
};

exports.updateTour = async (req, res) => {
  try {
    const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    });
    res.status(200).json({
      status: 'Success',
      data: {
        tour,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: `Error : ${err}`,
    });
  }
};

exports.deleteTour = async (req, res) => {
  try {
    await Tour.findByIdAndDelete(req.params.id);
    // const tour = Tour.findById(req.params.id);
    res.status(204).json({
      status: 'Success',
      data: null,
    });
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: `Error : ${err}`,
    });
  }
};
